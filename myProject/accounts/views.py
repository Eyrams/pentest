from django.shortcuts import render

# Create your views here.

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from accounts.models import SignatureUser, File
from django.core.mail import EmailMessage
from django.conf import settings

import os
import webauthn
import requests

from django.contrib.auth import authenticate
from .forms import *
from accounts.models import SignatureUser, File
from django.http import JsonResponse
from django.http import HttpResponse

from django.conf import settings
from django.http import HttpResponse, Http404
from django.views.decorators.csrf import csrf_exempt
import os

from django.views.decorators.csrf import csrf_exempt
import fitz
import hashlib

# Create your views here.
@csrf_exempt

def index(request):
    """ Fonction qui gère la page d'accueil (le formulaire d'enregistrement)"""
    if 'user' in request.session:
        return redirect('accounts:sign_page')

    if request.method == "POST":
        form = RegisterForm(request.POST, request.FILES)
        if form.is_valid():
            #response = generate_registration_options()
            form.save()
            messages.success(request, "Well save")

            return redirect('accounts:connexion')
        else:
            messages.error(request, "Fail")

    else:
        form = RegisterForm()

    context = {'form': form}

    return render(request, "accounts/inscription.html", context)


def connexion(request):
    if 'user' in request.session:
        return redirect('accounts:sign_page')
    if request.method == "POST":
        id_card = request.POST['id_card']

        try:
            signatureUser= get_object_or_404(SignatureUser, email=id_card)
            request.session['user'] = {
                'id': signatureUser.id,
                'last_name': signatureUser.last_name,
                'first_name': signatureUser.first_name,
                'national_id_card_number': signatureUser.username,
                'is_active': signatureUser.is_active,
                'email': signatureUser.email,
                'signature': signatureUser.image_signature.url,
                'credential_id': signatureUser.credential_id
            }
            return redirect("accounts:sign_page")
        except SignatureUser.DoesNotExist:
            messages.error(request, "Fail")
            return redirect("accounts:connexion")
    return render(request, 'accounts/connexion.html')


def deconnexion(request):
    if 'user' not in request.session:
        return redirect('accounts:connexion')
    del(request.session['user'])
    return redirect('accounts:connexion')


def sign_page(request):
    if 'user' not in request.session:
        print()
        # return redirect('accounts:connexion')
    """Fonction pour le traitement de la signature numérique"""
    if request.method == 'POST':
        file_to_sign = request.FILES['uploadfile']
        user = SignatureUser.objects.get(id=int(request.POST['User']))
        print("##################################################################")
        print("#################### Hash du fichier à signer ####################")
        print("#########                                                  #######")
        print("#########    Hash:                                         #######")
        print(get_file_hash(file_to_sign))
        print("#########                                                  #######")
        print("#########                                                  #######")
        print("##################################################################")

        file = File.objects.create(user=user, file_to_sign=file_to_sign, file_hash=get_file_hash(file_to_sign))

        request.session['file'] = {
            'id': file.id,
            'user': {
                'id': file.user.id,
                'last_name': file.…